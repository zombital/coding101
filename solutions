//rayMakeE
public int[] rayMakeE() {
  int[]a={2,7,1,8,2,8};
  return a;
  
}

//rayCountEvens
public int rayCountEvens(int[] numsList){
  int count =0;
  for(int i=0;i < numsList.length;i++){
    int current = numsList[i];
      if((current%2)==0)
        count++;
        
    }
    return count;
}

//raySumEm
public int raySumEm(int[] array) {
    int sum = 0;
    for (int value : array) {
        sum += value;
    }
    return sum;
}

//rayAverageEm
public double rayAverageEm(int[] nums) {
  if(nums==null || nums.length == 0)
    return 0;
  double sum=0;
  for(int x=0; x<nums.length;x++){
    sum+= nums[x];
    
  }

  return sum/nums.length;
}

//rayContainsInt
public boolean rayContainsInt(int[] nums, int value) {
  for(int i=0; i<nums.length;i++){
    if(nums[i]==value)
      return true;
  }
  return false;
  
}

//rayContainsString
public boolean rayContainsString(String[] strings, String word) {
  for(int i=0;i<strings.length;i++){
    if(strings[i].equals(word))
      return true;
  }
  return false;
}

//rayContainsDuplicateInts
public boolean rayContainsDuplicateInts(int[] nums) {
  for (int i = 0; i < nums.length; i++) {
     for (int j = i + 1 ; j < nums.length; j++) {
          if (nums[i]==(nums[j]))
            return true;
     }
     
}
return false;
}

//rayContainsDuplicateStrings
public boolean rayContainsDuplicateStrings(String[] names) {
   for (int i = 0; i < names.length; i++) {
     for (int j = i + 1 ; j < names.length; j++) {
          if (names[i].equals(names[j])) {
              return true;
          }
     }
 }
 return false;
  
}

//rayLinearSearch
public int rayLinearSearch(int[] arr, int key){  
  if(arr==null || arr.length==0)
    return -1;
        for(int i=0;i<arr.length;i++){    
            if(arr[i] == key){    
                return i;    
            }    
        }    
        return -1;    
}    

//rayBiggest
public int rayBiggest(int[] arr){
    
        if(arr==null||arr.length==0)
          return Integer.MIN_VALUE;
          int max = arr[0];
         for (int i = 1; i < arr.length; i++) 
             if (arr[i] > max) 
                 max = arr[i]; 
        
         return max; 
}

//rayLongest
public String rayLongest(String[] array) {
  if(array==null||array.length==0)
    return null;
  int maxLength = 0;
      String longestString = null;
      for (String s : array) {
          if (s.length() > maxLength) {
              maxLength = s.length();
              longestString = s;
          }
      }
      return longestString;
  
}

//rayIsAScending
public boolean rayIsAscending(int[] numArray){
  if( numArray==null)
    return false;
  if(numArray.length==0)
    return true;
  for(int i=1; i<numArray.length;i++)
      {
        if(numArray[i-1]>numArray[i])
            return false;
      }
      return true;
}
